import React, { useState, useEffect, useMemo } from 'react';
import '../fonts.css';

type ThemeMode = 'light' | 'dark';
type DurationOptionValue = number | 'custom';
type DurationOption = { value: DurationOptionValue; label: string };

interface Achievement {
  id: string;
  name: string;
  description: string;
  unlocked: boolean;
  icon: string;
}

const DURATION_OPTIONS: DurationOption[] = [
  { value: 10, label: '10 —Å–µ–∫—É–Ω–¥' },
  { value: 20, label: '20 —Å–µ–∫—É–Ω–¥' },
  { value: 30, label: '30 —Å–µ–∫—É–Ω–¥' },
  { value: 60, label: '1 –º–∏–Ω—É—Ç–∞' },
  { value: 120, label: '2 –º–∏–Ω—É—Ç—ã' },
  { value: 300, label: '5 –º–∏–Ω—É—Ç' },
];

const BASE_PHRASES = [
  '–¢—ã –º–æ–ª–æ–¥–µ—Ü! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üåü',
  '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üí™',
  '–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! –¢—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è! üéØ',
  '–≠—Ç–æ –±—ã–ª–æ –≤–ø–µ—á–∞—Ç–ª—è—é—â–µ! üöÄ',
  '–§–∞–Ω—Ç–∞—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! ‚ú®',
];

const INITIAL_ACHIEVEMENTS: Achievement[] = [
  {
    id: 'first-timer',
    name: '–ü–µ—Ä–≤—ã–π —Ä–∞–∑',
    description: '–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–∞–π–º–µ—Ä –≤–ø–µ—Ä–≤—ã–µ',
    unlocked: false,
    icon: 'üÜï',
  },
  {
    id: 'marathoner',
    name: '–ú–∞—Ä–∞—Ñ–æ–Ω–µ—Ü',
    description: '–ó–∞–≤–µ—Ä—à–∏—Ç–µ 5-–º–∏–Ω—É—Ç–Ω—ã–π —Ç–∞–π–º–µ—Ä',
    unlocked: false,
    icon: 'üèÉ',
  },
  {
    id: 'motivator',
    name: '–ú–æ—Ç–∏–≤–∞—Ç–æ—Ä',
    description: '–î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ—é —Ñ—Ä–∞–∑—É',
    unlocked: false,
    icon: 'üí¨',
  },
  {
    id: 'veteran',
    name: '–í–µ—Ç–µ—Ä–∞–Ω',
    description: '–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–∞–π–º–µ—Ä 10 —Ä–∞–∑',
    unlocked: false,
    icon: 'üéñÔ∏è',
  },
  {
    id: 'speedster',
    name: '–°–∫–æ—Ä–æ—Å—Ç–Ω–∏–∫',
    description: '–ó–∞–≤–µ—Ä—à–∏—Ç–µ 10-—Å–µ–∫—É–Ω–¥–Ω—ã–π —Ç–∞–π–º–µ—Ä',
    unlocked: false,
    icon: '‚ö°',
  },
];

const useLocalStorage = <T,>(key: string, initialValue: T): [T, (value: T) => void] => {
  const [storedValue, setStoredValue] = useState<T>(() => {
    try {
      const item = window.localStorage.getItem(key);
      return item ? JSON.parse(item) : initialValue;
    } catch (error) {
      return initialValue;
    }
  });

  const setValue = (value: T) => {
    try {
      setStoredValue(value);
      window.localStorage.setItem(key, JSON.stringify(value));
    } catch (error) {
      console.error(`Error setting localStorage key "${key}":`, error);
    }
  };

  return [storedValue, setValue];
};

const ThemeToggle = ({
  theme,
  toggleTheme,
}: {
  theme: ThemeMode;
  toggleTheme: () => void;
}) => (
  <button
    onClick={toggleTheme}
    className={`theme-toggle ${theme}`}
    aria-label={`–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ ${theme === 'light' ? '—Ç—ë–º–Ω—É—é' : '—Å–≤–µ—Ç–ª—É—é'} —Ç–µ–º—É`}
  >
    {theme === 'light' ? 'üåô' : '‚òÄÔ∏è'}
  </button>
);

const AchievementBadge = ({ achievement }: { achievement: Achievement }) => (
  <div className={`achievement-badge ${achievement.unlocked ? 'unlocked' : 'locked'}`}>
    <span className="achievement-icon">{achievement.icon}</span>
    <div className="achievement-info">
      <h4>{achievement.name}</h4>
      <p>{achievement.description}</p>
      <span className="achievement-status">
        {achievement.unlocked ? '‚úÖ –û—Ç–∫—Ä—ã—Ç–æ' : 'üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ'}
      </span>
    </div>
  </div>
);

const TimerMotivator = () => {
  const [name, setName] = useLocalStorage('timerMotivator-name', '');
  const [customPhrases, setCustomPhrases] = useLocalStorage<string[]>('timerMotivator-customPhrases', []);
  const [theme, setTheme] = useLocalStorage<ThemeMode>('timerMotivator-theme', 'light');
  const [completionCount, setCompletionCount] = useLocalStorage('timerMotivator-completionCount', 0);
  const [achievements, setAchievements] = useLocalStorage<Achievement[]>('timerMotivator-achievements', INITIAL_ACHIEVEMENTS);
  
  const [timeLeft, setTimeLeft] = useState(0);
  const [isRunning, setIsRunning] = useState(false);
  const [isComplete, setIsComplete] = useState(false);
  
  const [selectedPresetDuration, setSelectedPresetDuration] = useState<number>(
    DURATION_OPTIONS[0].value as number
  );
  const [isCustomMode, setIsCustomMode] = useState(false);
  const [customDurationInput, setCustomDurationInput] = useState<string>("60");

  const [currentPhrase, setCurrentPhrase] = useState('');
  const [newPhrase, setNewPhrase] = useState('');
  const [showPhraseForm, setShowPhraseForm] = useState(false);
  const [showAchievements, setShowAchievements] = useState(false);
  const [newAchievement, setNewAchievement] = useState<Achievement | null>(null);

  const allPhrases = useMemo(() => [...BASE_PHRASES, ...customPhrases], [customPhrases]);
  
  const actualTimerDuration = useMemo(() => {
    if (isCustomMode) {
      const customSeconds = parseInt(customDurationInput, 10);
      return isNaN(customSeconds) || customSeconds <= 0 ? 0 : customSeconds;
    }
    return selectedPresetDuration;
  }, [isCustomMode, customDurationInput, selectedPresetDuration]);

  const progress = useMemo(() => {
    if (actualTimerDuration === 0) return 0;
    return (timeLeft / actualTimerDuration) * 100;
  }, [timeLeft, actualTimerDuration]);

  useEffect(() => {
    if (isRunning && timeLeft > 0) {
      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);
      return () => clearTimeout(timer);
    } else if (timeLeft === 0 && isRunning) {
      completeTimer();
    }
  }, [isRunning, timeLeft]);

  useEffect(() => {
    if(isComplete){
      checkAchievements();
    }
  }, [completionCount, actualTimerDuration, customPhrases, isComplete]);

  const toggleTheme = () => setTheme(theme === 'light' ? 'dark' : 'light');

  const handleDurationChange = (event: React.ChangeEvent<HTMLSelectElement>) => {
    const { value } = event.target;
    if (value === 'custom') {
      setIsCustomMode(true);
    } else {
      setIsCustomMode(false);
      setSelectedPresetDuration(Number(value));
    }
  };

  const handleCustomDurationInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setCustomDurationInput(event.target.value);
  };
  
  const startTimer = () => {
    if (!name.trim()) {
        alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è.");
        return;
    }
    
    const durationToUse = actualTimerDuration;

    if (durationToUse <= 0) {
        alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∞–π–º–µ—Ä–∞ (–±–æ–ª—å—à–µ 0 —Å–µ–∫—É–Ω–¥).");
        return;
    }

    setTimeLeft(durationToUse);
    setIsRunning(true);
    setIsComplete(false);
    setCurrentPhrase('');
  };

  const resetTimer = () => {
    setIsRunning(false);
    setIsComplete(false);
    setTimeLeft(0);
  };

  const completeTimer = () => {
    setIsRunning(false);
    setIsComplete(true);
    setCompletionCount(completionCount + 1);
    setCurrentPhrase(allPhrases[Math.floor(Math.random() * allPhrases.length)]);
    new Audio('https://assets.mixkit.co/sfx/preview/mixkit-achievement-bell-600.mp3').play()
      .catch(e => console.error('Audio error:', e));
  };

  const addCustomPhrase = () => {
    if (newPhrase.trim()) {
      setCustomPhrases([...customPhrases, newPhrase.trim()]);
      setNewPhrase('');
      setShowPhraseForm(false);
    }
  };

  const removeCustomPhrase = (index: number) => {
    setCustomPhrases(customPhrases.filter((_, i) => i !== index));
  };

  const checkAchievements = () => {
    const currentDuration = actualTimerDuration;
    const updatedAchievementsList = achievements.map(ach => {
      if (ach.unlocked) return ach; 

      let newUnlockState = false;
      switch (ach.id) {
        case 'first-timer':
          newUnlockState = completionCount >= 1;
          break;
        case 'marathoner':
          newUnlockState = currentDuration >= 300 && isComplete;
          break;
        case 'motivator':
          newUnlockState = customPhrases.length > 0;
          break;
        case 'veteran':
          newUnlockState = completionCount >= 10;
          break;
        case 'speedster':
          newUnlockState = currentDuration === 10 && isComplete;
          break;
      }
      
      if (newUnlockState && !ach.unlocked) {
        setNewAchievement({ ...ach, unlocked: true });
        setTimeout(() => setNewAchievement(null), 3000);
      }
      return { ...ach, unlocked: newUnlockState };
    });
    setAchievements(updatedAchievementsList);
  };

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins > 0 ? `${mins}–º ` : ''}${secs}—Å`;
  };
  
  const getSelectedDropdownValue = (): DurationOptionValue => {
    return isCustomMode ? 'custom' : selectedPresetDuration;
  };

  return (
    <div className={`app-container ${theme}`}>
      <header className="app-header">
        <h1 className="app-title">–¢–∞–π–º–µ—Ä-–ú–æ—Ç–∏–≤–∞—Ç–æ—Ä</h1>
        <div className="header-controls">
          <ThemeToggle theme={theme} toggleTheme={toggleTheme} />
          <button 
            className="achievements-button"
            onClick={() => setShowAchievements(!showAchievements)}
            aria-label="–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"
          >
            üèÜ {completionCount}
          </button>
        </div>
      </header>

      <main className="app-main">
        {!isRunning && !isComplete ? (
          <div className="setup-panel">
            <div className="input-group">
              <label htmlFor="name-input">–í–∞—à–µ –∏–º—è:</label>
              <input
                id="name-input"
                type="text"
                value={name}
                onChange={(e) => setName(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
                className="text-input"
              />
            </div>

            <div className="input-group">
              <label htmlFor="duration-select">–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</label>
              <select
                id="duration-select"
                value={getSelectedDropdownValue()}
                onChange={handleDurationChange}
                className="select-input"
              >
                {DURATION_OPTIONS.map((option) => (
                  <option key={option.value} value={option.value}>
                    {option.label}
                  </option>
                ))}
                <option value="custom">–°–≤–æ–µ –≤—Ä–µ–º—è (—Å–µ–∫—É–Ω–¥—ã)</option>
              </select>
              {isCustomMode && (
                <input
                  id="custom-duration-input"
                  type="number"
                  value={customDurationInput}
                  onChange={handleCustomDurationInputChange}
                  placeholder="–í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"
                  className="text-input custom-duration-input"
                  min="1"
                />
              )}
            </div>

            <div className="phrase-management">
              <button
                className="phrase-toggle-button"
                onClick={() => setShowPhraseForm(!showPhraseForm)}
              >
                {showPhraseForm ? '–°–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É' : '–î–æ–±–∞–≤–∏—Ç—å —Ñ—Ä–∞–∑—É'}
              </button>

              {showPhraseForm && (
                <div className="phrase-form">
                  <input
                    type="text"
                    value={newPhrase}
                    onChange={(e) => setNewPhrase(e.target.value)}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—É—é —Ñ—Ä–∞–∑—É"
                    className="text-input"
                  />
                  <button
                    className="add-phrase-button"
                    onClick={addCustomPhrase}
                    disabled={!newPhrase.trim()}
                  >
                    –î–æ–±–∞–≤–∏—Ç—å
                  </button>
                </div>
              )}

              {customPhrases.length > 0 && (
                <div className="custom-phrases">
                  <h3>–í–∞—à–∏ —Ñ—Ä–∞–∑—ã:</h3>
                  <ul>
                    {customPhrases.map((phrase, index) => (
                      <li key={index}>
                        <span>{phrase}</span>
                        <button
                          className="remove-phrase-button"
                          onClick={() => removeCustomPhrase(index)}
                          aria-label={`–£–¥–∞–ª–∏—Ç—å —Ñ—Ä–∞–∑—É: ${phrase}`}
                        >
                          √ó
                        </button>
                      </li>
                    ))}
                  </ul>
                </div>
              )}
            </div>

            <button
              className="start-button"
              onClick={startTimer}
              disabled={!name.trim() || actualTimerDuration <= 0}
            >
              –°—Ç–∞—Ä—Ç
            </button>
          </div>
        ) : isRunning ? (
          <div className="timer-panel">
            <h2 className="timer-title">
              {name}, –æ—Å—Ç–∞–ª–æ—Å—å: <span className="time-left">{formatTime(timeLeft)}</span>
            </h2>
            
            <div className="progress-container">
              <div 
                className="progress-bar" 
                style={{ width: `${progress}%` }}
                aria-valuenow={progress}
                aria-valuemin={0}
                aria-valuemax={100}
                role="progressbar"
              ></div>
            </div>

            <button className="reset-button" onClick={resetTimer}>
              –°–±—Ä–æ—Å–∏—Ç—å
            </button>
          </div>
        ) : (
          <div className="completion-panel">
            <h2 className="congratulations">
              –¢—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è, {name}! üéâ
            </h2>
            <p className="motivational-phrase">{currentPhrase}</p>
            
            <div className="completion-buttons">
              <button className="try-again-button" onClick={startTimer}>
                –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
              </button>
              <button className="reset-button" onClick={resetTimer}>
                –°–±—Ä–æ—Å–∏—Ç—å
              </button>
            </div>
          </div>
        )}
      </main>
      
      {newAchievement && (
        <div className="achievement-notification">
          <div className="achievement-badge unlocked">
            <span className="achievement-icon">{newAchievement.icon}</span>
            <div className="achievement-info">
              <h4>–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!</h4>
              <p>{newAchievement.name}</p>
            </div>
          </div>
        </div>
      )}

      {showAchievements && (
        <div className="achievements-panel" role="dialog" aria-modal="true" aria-labelledby="achievements-title">
          <div className="achievements-header">
            <h3 id="achievements-title">–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h3>
            <button 
              className="close-button"
              onClick={() => setShowAchievements(false)}
              aria-label="–ó–∞–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"
            >
              √ó
            </button>
          </div>
          <div className="achievements-grid">
            {achievements.map((achievement) => (
              <AchievementBadge key={achievement.id} achievement={achievement} />
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default TimerMotivator;